const test = require('ava')
const sinon = require('sinon')
const option = require('../lib/util/option')

test('wrap a value/function/promise to a callback function', t => {
  t.is(typeof option.wrap, 'function')

  const fn1 = option.wrap()
  const cb1 = sinon.spy()
  t.is(typeof fn1, 'function')
  fn1(null, null, cb1)
  t.true(cb1.calledOnce)
  t.true(cb1.calledWith(null, null))

  const fn2 = option.wrap()
  const cb2 = sinon.spy()
  t.is(typeof fn2, 'function')
  fn2(null, 2, cb2)
  t.true(cb2.calledOnce)
  t.true(cb2.calledWith(null, 2))

  const fn3 = option.wrap(function () { return 3000 })
  const cb3 = sinon.spy()
  t.is(typeof fn3, 'function')
  fn3(null, 3, cb3)
  t.true(cb3.calledOnce)
  t.true(cb3.calledWith(null, 3000))

  const fn4 = option.wrap(function () { throw 'error' })
  const cb4 = sinon.spy()
  t.is(typeof fn4, 'function')
  fn4(null, 4, cb4)
  t.true(cb4.calledOnce)
  t.true(cb4.calledWith('error'))

  const fn5 = option.wrap(function () { return Promise.resolve(5000) })
  const cb5 = sinon.spy()
  t.is(typeof fn5, 'function')
  fn5(null, 5, cb5)
  t.false(cb5.calledOnce)
  setTimeout(() => {
    t.true(cb5.calledOnce)
    t.true(cb5.calledWith(null, 5000))
  }, 0)

  const fn6 = option.wrap(function () { return Promise.reject('error') })
  const cb6 = sinon.spy()
  t.is(typeof fn6, 'function')
  fn6(null, 6, cb6)
  t.false(cb6.calledOnce)
  setTimeout(() => {
    t.true(cb6.calledOnce)
    t.true(cb6.calledWith('error'))
  }, 0)
})
